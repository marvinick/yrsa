<% @title = @project.title + " - Details" %>

<br>


<!-- <a tabindex="0"
  class='btn btn-danger has-popover'
  data-html='true'
  data-toggle='popover'
  data-placement="bottom"
  data-trigger="focus"
  data-container="body"

  title='Dismissible popover'
  data-content= '<%= render :partial => 'form' %>'>
  Dismissible popover
</a> -->

<div class="container">
    <h3>Popover Example</h3>
    <p>Popovers are not CSS-only plugins, and must therefore be initialized with jQuery: select the specified element and call the popover() method.</p>
    <a href="#" id="tglr" class="popover-toggle" title="Popover Header">Toggle popover</a>

    <div id="customdiv" style="display: none">
      <%= render "form" %>
    </div>
 </div>


<br>
<br>

<h4 class="card-title">
  <strong>Details</strong>
  <%= link_to "+ New", new_account_project_detail_path(current_account, @project, @detail), remote: true, class: "btn btn-success btn-sm detail-button" %>
</h4>
<div class="new-detail-button"></div>
<h6 >With supporting text below as a natural lead-in to additional content.</h6>
<p class="card-text">back to <%= link_to @project.title, account_project_path(current_account, @project) %></p>
<hr>

<div class="my-details"></div>
<div class="row">
  <%= render @details %>
</div>

<div id="detail-modal" class="modal"></div>

<script>
  // We have to make sure turbolinks is loaded before we work our magic, feel free to experiment without!
  document.addEventListener('turbolinks:load', function () {
  // Assign the elements we're intrerested in to variables
  var openProjectButton = document.getElementById('new-project-button')
  var projectPopover = document.getElementById('new-project-popover')

  // Let's check to see if these elements exist before we add our listeners. We'll get warnings in our browser console otherwise.
  if (openProjectButton && projectPopover) {
    // Attach an event listener to our new project button
    openProjectButton.addEventListener('click', function () {
      // If the project popovers class list contains the 'is-hidden' class, remove it, otherwise return null
      return projectPopover.classList.contains('is-hidden') ? projectPopover.classList.remove('is-hidden') : null
    }, false)

    // Attach a click event listener to our cancel button
    const cancelProjectPopover = document.getElementById('cancel-project-popover')
    cancelProjectPopover.addEventListener('click', function () {
      // We can safely assume that if our user can see the Cancel button, then the
      // .is-hidden class is not part of the class list of project pop-over and we can
      // add it.
      return projectPopover.classList.add('is-hidden')
    }, false)
  }
  })
</script>
